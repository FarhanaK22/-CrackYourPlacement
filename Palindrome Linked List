/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode*  reverse (ListNode* head)
    {
        ListNode* curr = head;
        ListNode* next = NULL;
        ListNode* prev = NULL;

        while(curr)
        {
            next = curr->next;
            curr->next = prev ;
            prev = curr;
            curr  = next;
        }return prev;
    }
    bool isPalindrome(ListNode* head) {
        int count = 0;
        ListNode* temp = head;

        while(temp)
        {
            count ++;
            temp = temp->next;
        }
        ListNode* curr = head;
        if(count % 2 == 0)
        count ++;
        count /=2;
        while(count)
        {
            curr = curr->next;
            count --;
        }
        curr= reverse(curr);

        temp = head;

        while(curr )
        {
            if(curr->val != temp->val)
            return false;

            curr= curr->next;
            temp = temp->next;
        }
        return true;
    }
};
